%locations
%define parse.error verbose

%{
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include "ast.hpp"
// using namespace std;

extern int yylex(void);
extern int yyparse(void);
extern void yyrestart(FILE*);

void yyerror(const char *str);

extern char* yytext;
extern int yylineno;
extern int errorLexFlag;
extern int errorSyntaxFlag;

ProgramAST* Program;

// extern int yyparse(yyFlexLexer* yyflex);
%}

%union
{
    int int_val;
    float float_val;

    std::string* name;
    std::string* op; 
    std::string* Str;

    ast_list* AST_list;
    ExprAST* exprAST;
    FunctionAST* functionAST;
    TypeAST* typeAST;
    PrototypeAST* prototypeAST;
    BodyAST* bodyAST;
    VariableExprAST* variableexprAST;
    DecExprAST* decexprAST;
    DecListAST* declistAST;
}

%token <Str> COLON COMMA LC RC FUNCSPEC SEMI STRUCT IF WHILE TYPE ELSE
%token <Str> DEF RETURN MAIN VAR STMT
%token <name> ID
%token <int_val> INT
%token <float_val> FLOAT

// %type <> Program ExtDefList ExtDef ExtDecList   //  High-level Definitions
// %type <> Specifier StructSpecifier OptTag Tag   //  Specifiers
// %type <> VarDec FunDec VarList ParamDec         //  Declarators
// %type <> CompSt StmtList Stmt                   //  Statements
// %type <> DefList Def Dec DecList                //  Local Definitions
// %type <> Exp Args                               //  Expressions
%type <AST_list> ExtDefList ExtDecList VarList DefList StmtList DecList Args
%type <exprAST> ExtDef ReturnStmt Exp Stmt Dec
%type <functionAST> MainDef
%type <typeAST> Specifier
%type <prototypeAST> FunDec MainFunDec
%type <bodyAST> CompSt
%type <variableexprAST> VarDec
%type <decexprAST> ParamDec 
%type <declistAST> Def

%right <op> ASSIGNOP
%left <op> OR
%left <op> AND
%left <op> RELOP
%left <op> ADD SUB
%left <op> MUL DIV
%right <op> NOT
%left <op> DOT
%left <op> LB RB
%left <op> LP RP
%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE

%start Program

%%

// High-level Definitions
Program:            ExtDefList                              { Program = new ProgramAST(std::move(*$1)); }
    ; 
ExtDefList:         ExtDef ExtDefList                       { $$ = $2; $$->push_back(std::unique_ptr<ExprAST>($1)); }
    |               MainDef                                 { $$ = new ast_list();
                                                              $$->push_back(std::unique_ptr<ExprAST>($1)); }
    |                                                       { $$ = new ast_list(); } 
    ; 
ExtDef:             ExtDecList SEMI                         { $$ = new GlobalDecListAST(std::move(*$1)); }
    /* |               Specifier SEMI                          {  } */
    |               DEF FunDec COLON CompSt                 { $$ = new FunctionAST($2, $4); }
    |               error SEMI                              { printf("[Parser]Error in ExtDef\n"); }
    ; 
MainDef:            DEF MainFunDec COLON CompSt             { $$ = new FunctionAST($2, $4); }
    |               error SEMI                              { printf("[Parser]Error in MainDef\n"); }
    ;
ExtDecList:         VarDec COLON Specifier                  { $$ = new ast_list(); $$->push_back(std::unique_ptr<ExprAST>(new DecExprAST($1, $3))); }
    |               VarDec COLON Specifier COMMA ExtDecList { $$ = $5; $$->push_back(std::unique_ptr<ExprAST>(new DecExprAST($1, $3))); }
    ; 

// Specifiers
Specifier:          TYPE                                    { $$ = new TypeAST(*$1); }
    /* |               StructSpecifier                         {  } */
    ; 
/* StructSpecifier:    STRUCT OptTag LC DefList RC             {  }
    |               STRUCT Tag                              {  }
    ; 
OptTag:             ID                                      {  }
    |                                                       {  }
    ; 
Tag:                ID                                      {  } */
    ; 

// Declarators
VarDec:             ID                                      { $$ = new VariableExprAST(*$1); }
    /* |               VarDec LB INT RB                        {  } */
    |               error RB                                { printf("[Parser]Error in VerDec\n"); }
    ; 
FunDec:             ID LP VarList RP FUNCSPEC Specifier     { $$ = new PrototypeAST($6, *$1, std::move(*$3)); }
    |               ID LP RP FUNCSPEC Specifier             { ast_list* void_args; 
                                                              void_args = new ast_list(); 
                                                              $$ = new PrototypeAST($5, *$1, std::move(*void_args)); }
    |               error RP                                { printf("[Parser]Error in FunDec\n"); }
    ; 
MainFunDec:         MAIN LP RP FUNCSPEC Specifier           { ast_list* void_args; 
                                                              void_args = new ast_list(); 
                                                              $$ = new PrototypeAST($5, std::string("main"), std::move(*void_args)); }
    |               error RP                                { printf("[Parser]Error in MainFunDec\n"); }
    ; 
VarList:            ParamDec COMMA VarList                  { $$ = $3; $$->push_back(std::unique_ptr<ExprAST>($1)); }
    |               ParamDec                                { $$ = new ast_list(); $$->push_back(std::unique_ptr<ExprAST>($1)); }
    ; 
ParamDec:           VarDec COLON Specifier                  { $$ = new DecExprAST($1, $3); }
    ; 
// Statements
CompSt:             LC VAR DefList STMT StmtList RC         { $$ = new BodyAST(std::move(*$3), std::move(*$5)); }
    |               LC VAR DefList STMT StmtList ReturnStmt RC { $$ = new BodyAST(std::move(*$3), std::move(*$5), $6); }
    |               error RC                                { printf("[Parser]Error in CompSt\n"); }
    ; 
StmtList:           Stmt StmtList                           { $$ = $2; $$->push_back(std::unique_ptr<ExprAST>($1)); }
    |                                                       { $$ = new ast_list(); }
    ; 
Stmt:               Exp SEMI                                { $$ = $1; }
    |               CompSt                                  { $$ = $1; }   
    |               IF LP Exp RP Stmt %prec LOWER_THAN_ELSE {  }
    |               IF LP Exp RP Stmt ELSE Stmt             {  }
    |               WHILE LP Exp RP Stmt                    {  }
    |               error SEMI                              { printf("[Parser]Error in Stmt\n"); }
    ; 
ReturnStmt:         RETURN Exp SEMI                         { $$ = $2; }
    |               RETURN SEMI                             { $$ = new VoidExprAST(); }
// Local Definitions
DefList:            Def DefList                             { $$ = $2; $$->push_back(std::unique_ptr<ExprAST>($1)); }
    |                                                       { $$ = new ast_list(); }
    ;     
Def:                DecList SEMI                            { $$ = new DecListAST(std::move(*$1)); }
    ; 
DecList:            Dec                                     { $$ = new ast_list(); $$->push_back(std::unique_ptr<ExprAST>($1)); }
    |               Dec COMMA DecList                       { $$ = $3; $$->push_back(std::unique_ptr<ExprAST>($1)); }
    ; 
Dec:                VarDec COLON Specifier                  { $$ = new DecExprAST($1, $3); }
    |               VarDec COLON Specifier ASSIGNOP Exp     { DecExprAST* var;
                                                              var = new DecExprAST($1, $3); 
                                                              $$ = new AssignExprAST(var, $5); }
    ; 
//7.1.7 Expressions
Exp:                Exp ASSIGNOP Exp                        { $$ = new AssignExprAST($1, $3); }
    |               Exp AND Exp                             { $$ = new BinaryExprAST(*$2, $1, $3); }
    |               Exp OR Exp                              { $$ = new BinaryExprAST(*$2, $1, $3); }
    |               Exp RELOP Exp                           { $$ = new BinaryExprAST(*$2, $1, $3); }
    |               Exp ADD Exp                             { $$ = new BinaryExprAST(*$2, $1, $3); }
    |               Exp SUB Exp                             { $$ = new BinaryExprAST(*$2, $1, $3); }
    |               Exp MUL Exp                             { $$ = new BinaryExprAST(*$2, $1, $3); }
    |               Exp DIV Exp                             { $$ = new BinaryExprAST(*$2, $1, $3); }
    |               LP Exp RP                               { $$ = $2; }
    |               SUB Exp                                 { $$ = new BinaryExprAST(*$1, new IntExprAST(0), $2); }
    |               NOT Exp                                 { $$ = new BinaryExprAST(*$1, new VoidExprAST(), $2); }
    |               ID LP Args RP                           { $$ = new CallExprAST(*$1, std::move(*$3)); }
    |               ID LP RP                                { ast_list* void_args; 
                                                              void_args = new ast_list();  
                                                              $$ = new CallExprAST(*$1, std::move(*void_args)); }
    /* |               Exp LB Exp RB                           {  }
    |               Exp DOT ID                              {  } */
    |               ID                                      { $$ = new VariableExprAST(*$1); }
    |               INT                                     { $$ = new IntExprAST($1); }
    |               FLOAT                                   { $$ = new FloatExprAST($1); }
    ; 
Args :              Exp COMMA Args                          { $$ = $3; $$->push_back(std::unique_ptr<ExprAST>($1)); }
    |               Exp                                     { $$ = new ast_list(); $$->push_back(std::unique_ptr<ExprAST>($1)); }
    ; 
%%

/* void yyerror(char* msg){
    fprintf(stderr, "[Parser]Error at line %d: %s.\n %s\n", yylineno, msg, yytext);
} */
